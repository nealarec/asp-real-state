namespace TestAPI;

public class Program
{
    public static void Main(string[] args)
    {
        var builder = WebApplication.CreateBuilder(args);
        ConfigureServices(builder);

        var app = builder.Build();
        ConfigureMiddleware(app);

        app.Run();
    }

    public static void ConfigureServices(WebApplicationBuilder builder)
    {
        // Add services to the container.
        // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
        builder.Services.AddControllers();
        builder.Services.AddEndpointsApiExplorer();
        builder.Services.AddSwaggerGen();
        builder.Services.Configure<RouteOptions>(options =>
        {
            options.LowercaseUrls = true;
            options.LowercaseQueryStrings = true; // opcional
        });

        // Configure MongoDB
        builder.Services.Configure<Data.MongoDBSettings>(
            builder.Configuration.GetSection("MongoDBSettings"));

        builder.Services.AddSingleton<Services.MongoDBService>();

        builder.Services.AddScoped<Services.DAO.OwnerService>();
        builder.Services.AddScoped<Services.DAO.PropertyService>();
        builder.Services.AddScoped<Services.DAO.PropertyTraceService>();
        builder.Services.AddScoped<Services.DAO.PropertyImageService>();

        // Configure Storage Service
        var useAzureBlob = builder.Configuration.GetValue<bool>("Storage:UseAzureBlob");

        if (useAzureBlob)
        {
            // Configure Azure Blob Storage
            builder.Services.Configure<Model.AzureBlobSettings>(
                builder.Configuration.GetSection("AzureBlobSettings"));
            builder.Services.AddScoped<Services.Storage.IStorageService, Services.Storage.AzureService>();
        }
        else
        {
            // Configure AWS S3 (legacy)
            builder.Services.Configure<Model.S3Settings>(
                builder.Configuration.GetSection("S3Settings"));
            builder.Services.AddScoped<Services.Storage.IStorageService, Services.Storage.S3Service>();
        }
    }

    public static void ConfigureMiddleware(WebApplication app)
    {
        app.UseSwagger();
        app.UseSwaggerUI();

        // Configure the HTTP request pipeline.
        if (!app.Environment.IsDevelopment())
        {
            // Only use HTTPS redirection in production
            app.UseHttpsRedirection();
        }

        // ðŸ‘‰ Serve static files generated by Vite in wwwroot
        app.UseDefaultFiles();   // serves index.html if it exists
        app.UseStaticFiles();

        app.MapControllers();

        // ðŸ‘‰ Fallback for React Router/SPA routes
        app.MapFallbackToFile("index.html");
    }
}
